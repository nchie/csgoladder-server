var pg = require('pg')

var conString = "postgres://testapp:hejhej123@localhost/csgoladder";

var Sequelize = require('sequelize');

var sequelize = new Sequelize('csgoladder', 'postgres', 'hejhej123', {
  host: 'localhost',
  dialect: 'postgres',

  pool: {
    max: 5,
    min: 0,
    idle: 10000
  },
});


var User = sequelize.define('User', {
  id: {
        type: Sequelize.INTEGER,
        autoIncrement: true,
        primaryKey: true
    },
  openId: Sequelize.STRING,

  email: Sequelize.STRING,
  realName: Sequelize.STRING,
  birthDate: Sequelize.DATE,

  steamId64: Sequelize.BIGINT,
  displayName: Sequelize.STRING,
  countryCode: Sequelize.STRING,
  avatarSmall: Sequelize.STRING,
  avatarMedium: Sequelize.STRING,
  avatarFull: Sequelize.STRING,
  steamCreationDate: Sequelize.DATE,

  creationDate: { type: Sequelize.DATE, defaultValue: Sequelize.NOW },
}, {
  timestamps: false,
  freezeTableName: true, // Model tableName will be the same as the model name
  underscored: true
});


var Usergroup = sequelize.define('Usergroup', {
  name: {
        type: Sequelize.STRING,
        primaryKey: true,
    }
}, {
  timestamps: false,
  freezeTableName: true, // Model tableName will be the same as the model name
  underscored: true
});

var Team = sequelize.define('Team', {
  id: {
        type: Sequelize.INTEGER,
        autoIncrement: true,
        primaryKey: true
    },
  name: Sequelize.STRING,

  rating: Sequelize.BIGINT,

  creationDate: { type: Sequelize.DATE, defaultValue: Sequelize.NOW },
}, {
  timestamps: false,
  freezeTableName: true, // Model tableName will be the same as the model name
  underscored: true
});

var Match = sequelize.define('Match', {
  id: {
        type: Sequelize.INTEGER,
        autoIncrement: true,
        primaryKey: true
    },
  date: { type: Sequelize.DATE, defaultValue: Sequelize.NOW },

}, {
  timestamps: false,
  freezeTableName: true, // Model tableName will be the same as the model name
});


User.belongsTo(Usergroup, { foreignKey: {allowNull: false }})

Team.hasMany(Match, { foreignKey: {name: "team1_id" }})
Team.hasMany(Match, { foreignKey: {name: "team2_id" }})

Team.hasMany(User);

User.belongsTo(Team);

//sequelize.sync({ force: true })
sequelize.sync()


module.exports = {
  User: User,
  Usergroup: Usergroup,
  Team: Team,
  Match: Match
}



